version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15-alpine
    container_name: sentinel-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: ${POSTGRES_INITDB_ARGS}
      POSTGRES_HOST_AUTH_METHOD: ${POSTGRES_HOST_AUTH_METHOD}
      # Performance tuning
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS}
      POSTGRES_WORK_MEM: ${POSTGRES_WORK_MEM}
      POSTGRES_MAINTENANCE_WORK_MEM: ${POSTGRES_MAINTENANCE_WORK_MEM}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
      - ./docker/postgres/config/postgresql.conf:/etc/postgresql/postgresql.conf
    networks:
      - sentinel-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE

  # Honeypot Application Service
  sentinel-honeypot:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: sentinel-honeypot-app
    restart: unless-stopped
    environment:
      DATABASE_URL: ${DATABASE_URL}
      NODE_ENV: ${NODE_ENV}
      SENTINEL_SECRET_KEY: ${SENTINEL_SECRET_KEY}
      SENTINEL_JWT_SECRET: ${SENTINEL_JWT_SECRET}
      SENTINEL_EMAIL: ${SENTINEL_EMAIL}
      SENTINEL_LOG_LEVEL: ${SENTINEL_LOG_LEVEL}
      MONITORING_ENABLED: ${MONITORING_ENABLED}
      GEOIP_DATABASE_PATH: ${GEOIP_DATABASE_PATH}
    ports:
      - "8080:8080"
      - "2222:22"    # SSH honeypot
      - "2121:21"    # FTP honeypot
      - "8023:23"    # Telnet honeypot
    volumes:
      - honeypot_data:/app/data
      - logs_volume:/var/log/sentinel
      - ./config:/app/config:ro
      - ./docker/geoip:/opt/geoip:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sentinel-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Redis Cache Service (for session management and caching)
  redis:
    image: redis:7-alpine
    container_name: sentinel-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-SentinelRedis2025!}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sentinel-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  # Monitoring Service (Prometheus)
  prometheus:
    image: prom/prometheus:latest
    container_name: sentinel-prometheus
    restart: unless-stopped
    ports:
      - "${METRICS_PORT:-9090}:9090"
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - sentinel-network
    depends_on:
      - sentinel-honeypot
    profiles:
      - monitoring

  # Log Aggregation Service (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: sentinel-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-SentinelGrafana2025!}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - sentinel-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: sentinel-backup
    restart: "no"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_SCHEDULE: ${BACKUP_SCHEDULE}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS}
    volumes:
      - postgres_data:/var/lib/postgresql/data:ro
      - ./backups:/backups
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    command: ["/bin/sh", "-c", "crond -f"]
    networks:
      - sentinel-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - backup

# Networks
networks:
  sentinel-network:
    driver: bridge
    ipam:
      config:
        - subnet: ${DOCKER_SUBNET:-172.20.0.0/16}

# Volumes
volumes:
  postgres_data:
    driver: local
    name: ${POSTGRES_DATA_VOLUME:-sentinel_postgres_data}
  honeypot_data:
    driver: local
    name: ${HONEYPOT_DATA_VOLUME:-sentinel_honeypot_data}
  logs_volume:
    driver: local
    name: ${LOGS_VOLUME:-sentinel_logs}
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
